%% Linear Systems and Signals Lab 5
% Z-Transform MATLAB Laboratory Experiment

% Michael Soskind
% Cagdas Karatas Section 5

%% Problem 1

% alpha*(1+beta)*y[k-1]+alpha*beta*y[k-2] = f[k]
% convert above to transfer function to get num/den
alpha = 1/8; beta = 1; 
yNeg2 = 0; yNeg1 = 0;
num = [1]; den = [1, -alpha*(1+beta), alpha*beta,];
% Numerator and Denomenator found from function above, with all initial
% conditions equal to zero

figure(1);
yImpulse=dimpulse(num,den); % Discrete impulse response
d_s=length(yImpulse);
k=0:1:d_s-1;
% Plotting the impulse response
plot(k,yImpulse,'o');
grid; xlabel('discrete time k'); ylabel('system impulse response');

figure(2);
yStep = dstep(num,den); % Discrete step response
d_s=length(yStep);
k=0:1:d_s-1;
% Plotting the step response
plot(k,yStep,'o');
grid; xlabel('discrete time k'); ylabel('system step response');

figure(3);
fun1 = sin(4.*k);               % Defining the function sin(4k)
yFun1 = dlsim(num,den,fun1);    % Discrete signal response
d_s=length(yFun1);
k=0:1:d_s-1;
% Plotting the signal response
plot(k,yFun1,'o');
grid; xlabel('discrete time k'); ylabel('system signal response');

figure(4);
fun2 = (-1).^k;                 % Defining the function -1^k
yFun2 = dlsim(num,den,fun2);    % Discrete signal response
d_s=length(yFun2);
k=0:1:d_s-1;
% Plotting the signal response
plot(k,yFun2,'o');
grid; xlabel('discrete time k'); ylabel('system signal response');

%% Problem 2
clear all; clc;

% defining the numerator and denomenator (num/den)
num = [1,-3,5,7,0]; den = [2,0,5,-3,1,-2,3,-1];

% Performing transfer function to zeros and poles function
[z,p,k_s] = tf2zp(num,den);

numOverz=[1 -3 5 7]; % H(z) divided by z gives these coefficients

[R_i,P_i,K_i] = residue(num,den);   % Finding the residue, mandatory for
                                    % defining the Transfer function 

d_i = length(P_i);
k_i = 0:1:d_i-1;
% Defining the transfer function using the zeros poles and residues
H_i = 2.*abs(R_i(1)).*abs(P_i(1)).^k_i.*cos(angle(P_i(1)).*k_i+angle(R_i(1))) + ...
    2.*abs(R_i(3)).*abs(P_i(3)).^k_i.*cos(angle(P_i(3)).*k_i+angle(R_i(3))) + ...
    2.*abs(R_i(5)).*abs(P_i(5)).^k_i.*cos(angle(P_i(5)).*k_i+angle(R_i(5))) + ...
    abs(R_i(7)).*abs(P_i(7)).^k_i;

% Creating the plot of the impulse response
figure();
plot(k_i,H_i,'ro')
grid; xlabel('discrete time k'); ylabel('system impulse response');

% (c) Step response (F(z)=z/(z-1))
num_s=conv(num,[1 0]); den_s=conv(den,[1 -1]);
% This conolution is used for
% going from the impulse to step response, defined in the book on 
% page 240 in chapter 5 section 3 subsection 'Step Response'
[R_s,P_s,K_s] = residue(num_s,den_s);

d_s = length(P_i);
k_s = 0:1:d_s-1;
% Performing the same style of function as before with the convolved (step
% response) data
H_s = 2.*abs(R_s(1)).*abs(P_s(1)).^k_s.*cos(angle(P_s(1)).*k_s+angle(R_s(1))) + ...
    2.*abs(R_s(4)).*abs(P_s(4)).^k_s.*cos(angle(P_s(4)).*k_s+angle(R_s(4))) + ...
    2.*abs(R_s(6)).*abs(P_s(6)).^k_s.*cos(angle(P_s(6)).*k_s+angle(R_s(6))) + ...
    abs(R_s(3)).*abs(P_s(3)).^k_s + abs(R_s(8)).*abs(P_s(8)).^k_s;

% Plotting the Step Response of the System
figure();
plot(k_s,H_s,'bo')
grid; xlabel('discrete time k'); ylabel('system step response');


%% Part 3

num = [1,-3,5,7,0]; den = [2,0,5,-3,1,-2,3,-1]; % same as previous num/dem
newNum = [1,-2,3,-1];           % The newNum (new numverator) comes from
                                % formula 5.45 with only y[4] being nonzero
figure()
y4 = 5;                         % y4 is defined as y[4] = 5
y = y4.*dimpulse(newNum, den);  % y4 is multiplied by the impulse response
% Note: the impulse response
l = 10;                         % l = length(y);
plot(1:l, y(1:l), 'o');
grid; xlabel('discrete time k'); ylabel('zero-input response');
